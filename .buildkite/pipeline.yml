steps:
  - label: "Benchmarks"
    priority: 1
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
    env:
      CODESPEED_PROJECT: "FluxBench"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.6"
      SECRET_CODESPEED_SERVER: "DyBxj9TMW7C69tAefpRCieKLvsMEOJKE3RXzj0o2zSRvWFnsVrocrV1bSnD1ApTp0yuYutfj/0RdrKWBKuZTuMVDg1yOslQqTmJBL+zfDmwRrxmo5AkaLLAIzkL15l9Z7FJuEBszvtEOhA9uJfsdN2R4OHcGZzfKJ8KfTIzyFtjZpAoxoYao292IhmkUA9rf13JSMSnKwd4Od1XkuF9Dhz0KRpIvagVDTQKG06WEKYX1CArXF/3DP/FMC7ZrFEllO2KinxiNv7SPq3e/0IUgKGPWEaaMR60N6Dfibg0EXpZ5O/H5SkSN8oDhzmdYKQcyhVLVvLazlQkLGwA3hcViVQ==;U2FsdGVkX1+2GfXSirm0qTNaQDyeGFowE3VdIpUgymprMoWFUF7O/K6MxycX9nOv4QZJ//qwmEhdAKUc5KlnEA=="
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = "FluxBench" # ENV["BUILDKITE_AGENT_NAME"]
        println("Preparing Environment")
        using Pkg
        Pkg.instantiate()
        println("Starting Benchmarks")
        using FluxBench
        FluxBench.submit(true)'
    agents:
      queue: "benchmark"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/

  - label: "Benchmarks (Trial)"
    priority: 1
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
    env:
      CODESPEED_PROJECT: "FluxBench"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.6"
      SECRET_CODESPEED_SERVER: "DyBxj9TMW7C69tAefpRCieKLvsMEOJKE3RXzj0o2zSRvWFnsVrocrV1bSnD1ApTp0yuYutfj/0RdrKWBKuZTuMVDg1yOslQqTmJBL+zfDmwRrxmo5AkaLLAIzkL15l9Z7FJuEBszvtEOhA9uJfsdN2R4OHcGZzfKJ8KfTIzyFtjZpAoxoYao292IhmkUA9rf13JSMSnKwd4Od1XkuF9Dhz0KRpIvagVDTQKG06WEKYX1CArXF/3DP/FMC7ZrFEllO2KinxiNv7SPq3e/0IUgKGPWEaaMR60N6Dfibg0EXpZ5O/H5SkSN8oDhzmdYKQcyhVLVvLazlQkLGwA3hcViVQ==;U2FsdGVkX1+2GfXSirm0qTNaQDyeGFowE3VdIpUgymprMoWFUF7O/K6MxycX9nOv4QZJ//qwmEhdAKUc5KlnEA=="
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = "FluxBench" # ENV["BUILDKITE_AGENT_NAME"]
        println("Preparing Environment")
        using Pkg
        Pkg.instantiate()
        println("Starting Benchmarks")
        using FluxBench, Flux, CUDA
        using CUDA.NVML
        try
          FluxBench.submit(false)
        catch e
          dev = NVML.devices()
          for d in dev
            @show NVML.compute_processes(d)
          end
          rethrow(e)
        end'
    agents:
      queue: "benchmark"
      cuda: "*"
      cap: "sm_75"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch !~ /^master$$/
